#!/bin/sh
echo "🔍 Running comprehensive pre-commit checks..."

# Track start time
START_TIME=$(date +%s)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo "${BLUE}==> $1${NC}"
}

print_success() {
    echo "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo "${RED}❌ $1${NC}"
}

# Exit on any error (we'll selectively override for optional steps)
set -e

# Allow developers to skip all pre-commit checks when needed
if [ "$SKIP_PRECOMMIT_ALL" = "1" ]; then
  echo "⏭️  SKIP_PRECOMMIT_ALL=1 set — skipping all checks"
  exit 0
fi

print_status "1. Security & Dependencies Audit"
if [ "$SKIP_PRECOMMIT_AUDIT" = "1" ]; then
  print_warning "Skipping npm audit (SKIP_PRECOMMIT_AUDIT=1)"
else
  echo "🔒 Checking for security vulnerabilities..."
  # Skip audit gracefully when offline
  if npm ping >/dev/null 2>&1; then
    if npm audit --audit-level=high --production; then
      print_success "No high-severity vulnerabilities found"
    else
      if [ "$ALLOW_AUDIT_FAILURE" = "1" ]; then
        print_warning "Security vulnerabilities detected, continuing (ALLOW_AUDIT_FAILURE=1)"
      else
        print_error "Security vulnerabilities detected! Run 'npm audit fix' or set ALLOW_AUDIT_FAILURE=1 to proceed"
        exit 1
      fi
    fi
  else
    print_warning "Offline or registry unreachable — skipping npm audit"
  fi
fi

print_status "2. Lint and Format Staged Files"
echo "📝 Formatting and linting staged files..."
npx lint-staged

print_status "3. TypeScript Type Checking"
if [ "$SKIP_PRECOMMIT_CHECK" = "1" ]; then
  print_warning "Skipping typecheck/lint/format check (SKIP_PRECOMMIT_CHECK=1)"
else
  echo "🔍 Running TypeScript type checking..."
  npm run check
fi

print_status "4. Build Verification"
if [ "$SKIP_PRECOMMIT_BUILD" = "1" ]; then
  print_warning "Skipping build (SKIP_PRECOMMIT_BUILD=1)"
else
  echo "🏗️  Building project to ensure it compiles..."
  npm run build
fi

print_status "5. Test Suite"
if [ "$SKIP_PRECOMMIT_TESTS" = "1" ]; then
  print_warning "Skipping tests (SKIP_PRECOMMIT_TESTS=1)"
else
  echo "🧪 Running comprehensive test suite..."
  npm test
fi

print_status "6. Package Integrity"
echo "📦 Verifying package.json integrity..."
if npm ls --depth=0 > /dev/null 2>&1; then
    print_success "Package dependencies are consistent"
else
    print_warning "Package dependency issues detected"
fi

print_status "7. Git Hooks Validation"
echo "🪝 Verifying Git hooks are properly configured..."
if [ -f .husky/commit-msg ] && [ -x .husky/commit-msg ]; then
    print_success "Commit message hooks configured"
else
    print_warning "Commit message validation not configured"
fi

# Check if GPG signing is configured
if git config --get commit.gpgsign > /dev/null 2>&1; then
    if [ "$(git config --get commit.gpgsign)" = "true" ]; then
        print_success "GPG commit signing is enabled"
    else
        print_warning "GPG commit signing is disabled"
    fi
else
    print_warning "GPG commit signing not configured"
fi


# Calculate execution time
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo ""
print_success "All pre-commit checks passed! ⚡ Completed in ${DURATION}s"
echo ""
echo "🚀 Ready to commit with confidence!"
