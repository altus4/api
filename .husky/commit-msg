#!/bin/sh
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() {
    echo "${GREEN}✅ $1${NC}"
}

print_error() {
    echo "${RED}❌ $1${NC}"
}

print_warning() {
    echo "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo "${BLUE}ℹ️  $1${NC}"
}

# Get the commit message
commit_message=$(cat "$1")

echo ""
print_info "Validating commit message and configuration..."

# Check if commit message follows conventional commit format
if ! echo "$commit_message" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,50}"; then
    echo ""
    print_error "Invalid commit message format!"
    echo ""
    echo "Please use conventional commits format:"
    echo "  ${BLUE}<type>[optional scope]: <description>${NC}"
    echo ""
    echo "Types:"
    echo "  ${GREEN}feat:${NC}     A new feature"
    echo "  ${GREEN}fix:${NC}      A bug fix"
    echo "  ${GREEN}docs:${NC}     Documentation changes"
    echo "  ${GREEN}style:${NC}    Code style changes (formatting, etc)"
    echo "  ${GREEN}refactor:${NC} Code refactoring"
    echo "  ${GREEN}perf:${NC}     Performance improvements"
    echo "  ${GREEN}test:${NC}     Adding or updating tests"
    echo "  ${GREEN}build:${NC}    Build system changes"
    echo "  ${GREEN}ci:${NC}       CI/CD changes"
    echo "  ${GREEN}chore:${NC}    Other changes"
    echo ""
    echo "Examples:"
    echo "  ${BLUE}feat: add user authentication${NC}"
    echo "  ${BLUE}fix(api): resolve database connection issue${NC}"
    echo "  ${BLUE}docs: update README with installation steps${NC}"
    echo ""
    exit 1
fi

print_success "Commit message format is valid!"

# Check GPG signing configuration
if git config --get commit.gpgsign > /dev/null 2>&1; then
    if [ "$(git config --get commit.gpgsign)" = "true" ]; then
        print_success "GPG commit signing is enabled"
    else
        print_warning "GPG commit signing is disabled"
        echo "  Run: git config --global commit.gpgsign true"
    fi
else
    print_warning "GPG commit signing not configured"
    echo "  Run: ./bin/setup-gpg.sh to set up commit signing"
fi

# Check for sensitive information in commit message
if echo "$commit_message" | grep -qiE "(password|secret|key|token|api[_-]?key|private)"; then
    print_warning "Commit message may contain sensitive information"
    echo "  Please review the commit message for any secrets"
fi

echo ""
print_success "Commit message validation passed!"
