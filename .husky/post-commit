#!/bin/sh
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() {
    echo "${GREEN}✅ $1${NC}"
}

print_error() {
    echo "${RED}❌ $1${NC}"
}

print_warning() {
    echo "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo "${BLUE}ℹ️  $1${NC}"
}

echo ""
print_info "Verifying commit integrity..."

# Get the latest commit hash
COMMIT_HASH=$(git rev-parse HEAD)

# Check if the commit is GPG signed
if git verify-commit "$COMMIT_HASH" >/dev/null 2>&1; then
    print_success "Commit is properly GPG signed and verified!"

    # Get GPG signature info
    GPG_INFO=$(git show --show-signature --format="%G? %GS" -s "$COMMIT_HASH" | head -1)
    print_info "Signature: $GPG_INFO"

else
    print_warning "Commit is not GPG signed or verification failed"
    echo "  This commit will not show as 'Verified' on GitHub"
    echo "  To set up GPG signing: ./bin/setup-gpg.sh"
fi

# Check commit message format (redundant check for verification)
COMMIT_MSG=$(git log -1 --pretty=format:%s "$COMMIT_HASH")
if echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,50}"; then
    print_success "Commit follows conventional commits format"
else
    print_warning "Commit does not follow conventional commits format"
fi

# Check for branch protection compliance
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
    print_warning "Direct commit to $CURRENT_BRANCH branch detected"
    echo "  Consider using feature branches and pull requests for better workflow"
fi

# Display commit summary
echo ""
print_info "Commit Summary:"
echo "  Hash: $COMMIT_HASH"
echo "  Branch: $CURRENT_BRANCH"
echo "  Message: $COMMIT_MSG"
echo ""
print_success "Post-commit verification completed!"
