#!/usr/bin/env bash

# Remote Migration Script for Heroku Database
# This script allows running migrations from local machine against production database

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Remote Migration Tool for Altus4${NC}"
echo -e "${BLUE}======================================${NC}"

# Check if .env.production exists
if [ ! -f ".env.production" ]; then
    echo -e "${RED}Error: .env.production file not found${NC}"
    echo -e "${YELLOW}Info: Please create .env.production with your Heroku database URL${NC}"
    echo -e "${YELLOW}   You can get it with: heroku config:get CLEARDB_DATABASE_URL${NC}"
    exit 1
fi

# Show current environment
echo -e "${YELLOW}Environment Configuration:${NC}"
echo -e "   Environment: production (remote)"
echo -e "   Config file: .env.production"
echo ""

# Function to run commands with proper environment
run_with_env() {
    local command="$1"
    local description="$2"
    
    echo -e "${BLUE}${description}...${NC}"
    
    # Load production environment and run command
    set -a
    source .env.production
    set +a
    
    if eval "$command"; then
        echo -e "${GREEN}Success: ${description} completed successfully${NC}"
    else
        echo -e "${RED}Error: ${description} failed${NC}"
        exit 1
    fi
    echo ""
}

# Show usage if no arguments
if [ $# -eq 0 ]; then
    echo -e "${YELLOW}Usage: ./bin/migrate-remote <command>${NC}"
    echo ""
    echo -e "${YELLOW}Available commands:${NC}"
    echo -e "  ${GREEN}test${NC}        - Test database connection"
    echo -e "  ${GREEN}status${NC}      - Show migration status"
    echo -e "  ${GREEN}run${NC}         - Run pending migrations"
    echo -e "  ${GREEN}rollback${NC}    - Rollback last migration"
    echo -e "  ${GREEN}reset${NC}       - Reset all migrations (DANGEROUS)"
    echo -e "  ${GREEN}fresh${NC}       - Fresh migration (DANGEROUS)"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  ./bin/migrate-remote test"
    echo -e "  ./bin/migrate-remote status"
    echo -e "  ./bin/migrate-remote run"
    echo ""
    exit 0
fi

command="$1"

case "$command" in
    "test")
        run_with_env "npm run test:db" "Testing database connection"
        ;;
    "status")
        run_with_env "npm run migrate:status" "Checking migration status"
        ;;
    "run")
        echo -e "${YELLOW}Warning: This will run migrations against your production database${NC}"
        echo -e "${YELLOW}   Make sure you have backups and have tested locally first${NC}"
        read -p "Continue? (y/N): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            run_with_env "npm run migrate:run" "Running migrations"
        else
            echo -e "${YELLOW}Migration cancelled${NC}"
        fi
        ;;
    "rollback")
        echo -e "${YELLOW}Warning: This will rollback the last migration in production${NC}"
        read -p "Continue? (y/N): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            run_with_env "npm run migrate:rollback" "Rolling back migration"
        else
            echo -e "${YELLOW}Rollback cancelled${NC}"
        fi
        ;;
    "reset")
        echo -e "${RED}Warning: DANGER: This will reset ALL migrations in production${NC}"
        echo -e "${RED}   This will DROP all tables and recreate them${NC}"
        read -p "Type 'RESET' to confirm: " -r
        echo ""
        if [[ $REPLY == "RESET" ]]; then
            run_with_env "npm run migrate:reset" "Resetting migrations"
        else
            echo -e "${YELLOW}Reset cancelled${NC}"
        fi
        ;;
    "fresh")
        echo -e "${RED}Warning: DANGER: This will run fresh migrations in production${NC}"
        echo -e "${RED}   This will DROP all tables and recreate them${NC}"
        read -p "Type 'FRESH' to confirm: " -r
        echo ""
        if [[ $REPLY == "FRESH" ]]; then
            run_with_env "npm run migrate:fresh" "Running fresh migrations"
        else
            echo -e "${YELLOW}Fresh migration cancelled${NC}"
        fi
        ;;
    *)
        echo -e "${RED}Error: Unknown command: $command${NC}"
        echo -e "${YELLOW}Run ./bin/migrate-remote without arguments to see usage${NC}"
        exit 1
        ;;
esac

echo -e "${GREEN}Success: Remote migration operation completed!${NC}"