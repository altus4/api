name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: altus4_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Prepare npm
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set prefer-online true
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm cache clean --force

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
            echo 'Waiting for MySQL...'
            sleep 2
          done

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS altus4_test;"
          mysql -h 127.0.0.1 -P 3306 -u root -proot altus4_test < migrations/001_create_users_table.up.sql
          mysql -h 127.0.0.1 -P 3306 -u root -proot altus4_test < migrations/002_create_searches_table.up.sql
          mysql -h 127.0.0.1 -P 3306 -u root -proot altus4_test < migrations/003_create_analytics_table.up.sql
          mysql -h 127.0.0.1 -P 3306 -u root -proot altus4_test < migrations/004_create_api_keys_table.up.sql
          mysql -h 127.0.0.1 -P 3306 -u root -proot altus4_test < migrations/006_create_database_connections_table.up.sql
          mysql -h 127.0.0.1 -P 3306 -u root -proot altus4_test < migrations/007_create_search_analytics_table.up.sql

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Build project
        run: npm run build

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: root
          DB_DATABASE: altus4_test
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: root
          DB_DATABASE: altus4_test
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: root
          DB_DATABASE: altus4_test
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Prepare npm
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set prefer-online true
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm cache clean --force

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency check
        run: npx audit-ci --config .auditci.json || true
